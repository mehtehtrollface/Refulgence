using System.ComponentModel;
using Refulgence.Text;

namespace Refulgence.Sm5;

public static class EnumExtensions
{
    public static string ToMnemonic(this OpCodeType opCode)
        => opCode switch
        {
            OpCodeType.Add                          => "add",
            OpCodeType.And                          => "and",
            OpCodeType.Break                        => "break",
            OpCodeType.BreakC                       => "breakc",
            OpCodeType.Call                         => "call",
            OpCodeType.CallC                        => "callc",
            OpCodeType.Case                         => "case",
            OpCodeType.Continue                     => "continue",
            OpCodeType.ContinueC                    => "continuec",
            OpCodeType.Cut                          => "cut",
            OpCodeType.Default                      => "default",
            OpCodeType.DerivRtx                     => "deriv_rtx",
            OpCodeType.DerivRty                     => "deriv_rty",
            OpCodeType.Discard                      => "discard",
            OpCodeType.Div                          => "div",
            OpCodeType.Dp2                          => "dp2",
            OpCodeType.Dp3                          => "dp3",
            OpCodeType.Dp4                          => "dp4",
            OpCodeType.Else                         => "else",
            OpCodeType.Emit                         => "emit",
            OpCodeType.EmitThenCut                  => "emit_then_cut",
            OpCodeType.EndIf                        => "endif",
            OpCodeType.EndLoop                      => "endloop",
            OpCodeType.EndSwitch                    => "endswitch",
            OpCodeType.Eq                           => "eq",
            OpCodeType.Exp                          => "exp",
            OpCodeType.Frc                          => "frc",
            OpCodeType.FToI                         => "ftoi",
            OpCodeType.FToU                         => "ftou",
            OpCodeType.Ge                           => "ge",
            OpCodeType.IAdd                         => "iadd",
            OpCodeType.If                           => "if",
            OpCodeType.IEq                          => "ieq",
            OpCodeType.IGe                          => "ige",
            OpCodeType.ILt                          => "ilt",
            OpCodeType.IMad                         => "imad",
            OpCodeType.IMax                         => "imax",
            OpCodeType.IMin                         => "imin",
            OpCodeType.IMul                         => "imul",
            OpCodeType.INe                          => "ine",
            OpCodeType.INeg                         => "ineg",
            OpCodeType.IShl                         => "ishl",
            OpCodeType.IShr                         => "ishr",
            OpCodeType.IToF                         => "itof",
            OpCodeType.Label                        => "label",
            OpCodeType.Ld                           => "ld",
            OpCodeType.LdMs                         => "ldms",
            OpCodeType.Log                          => "log",
            OpCodeType.Loop                         => "loop",
            OpCodeType.Lt                           => "lt",
            OpCodeType.Mad                          => "mad",
            OpCodeType.Min                          => "min",
            OpCodeType.Max                          => "max",
            OpCodeType.CustomData                   => "custom_data",
            OpCodeType.Mov                          => "mov",
            OpCodeType.MovC                         => "movc",
            OpCodeType.Mul                          => "mul",
            OpCodeType.Ne                           => "ne",
            OpCodeType.Nop                          => "nop",
            OpCodeType.Not                          => "not",
            OpCodeType.Or                           => "or",
            OpCodeType.ResInfo                      => "resinfo",
            OpCodeType.Ret                          => "ret",
            OpCodeType.RetC                         => "retc",
            OpCodeType.RoundNe                      => "round_ne",
            OpCodeType.RoundNi                      => "round_ni",
            OpCodeType.RoundPi                      => "round_pi",
            OpCodeType.RoundZ                       => "round_z",
            OpCodeType.Rsq                          => "rsq",
            OpCodeType.Sample                       => "sample",
            OpCodeType.SampleC                      => "sample_c",
            OpCodeType.SampleCLz                    => "sample_c_lz",
            OpCodeType.SampleL                      => "sample_l",
            OpCodeType.SampleD                      => "sample_d",
            OpCodeType.SampleB                      => "sample_b",
            OpCodeType.Sqrt                         => "sqrt",
            OpCodeType.Switch                       => "switch",
            OpCodeType.SinCos                       => "sincos",
            OpCodeType.UDiv                         => "udiv",
            OpCodeType.ULt                          => "ult",
            OpCodeType.UGe                          => "uge",
            OpCodeType.UMul                         => "umul",
            OpCodeType.UMad                         => "umad",
            OpCodeType.UMax                         => "umax",
            OpCodeType.UMin                         => "umin",
            OpCodeType.UShr                         => "ushr",
            OpCodeType.UToF                         => "utof",
            OpCodeType.Xor                          => "xor",
            OpCodeType.DclResource                  => "dcl_resource",
            OpCodeType.DclConstantBuffer            => "dcl_constantbuffer",
            OpCodeType.DclSampler                   => "dcl_sampler",
            OpCodeType.DclIndexRange                => "dcl_indexrange",
            OpCodeType.DclGsOutputPrimitiveTopology => "dcl_outputtopology",
            OpCodeType.DclGsInputPrimitive          => "dc_inputprimitive",
            OpCodeType.DclMaxOutputVertexCount      => "dcl_maxout",
            OpCodeType.DclInput                     => "dcl_input",
            OpCodeType.DclInputSgv                  => "dcl_input_sgv",
            OpCodeType.DclInputSiv                  => "dcl_input_siv",
            OpCodeType.DclInputPs                   => "dcl_input_ps",
            OpCodeType.DclInputPsSgv                => "dcl_input_ps_sgv",
            OpCodeType.DclInputPsSiv                => "dcl_input_ps_siv",
            OpCodeType.DclOutput                    => "dcl_output",
            OpCodeType.DclOutputSgv                 => "dcl_output_sgv",
            OpCodeType.DclOutputSiv                 => "dcl_output_siv",
            OpCodeType.DclTemps                     => "dcl_temps",
            OpCodeType.DclIndexableTemp             => "dcl_indexableTemp",
            OpCodeType.DclGlobalFlags               => "dcl_globalFlags",

            OpCodeType.Lod        => "lod",
            OpCodeType.Gather4    => "gather4",
            OpCodeType.SamplePos  => "samplepos",
            OpCodeType.SampleInfo => "sampleinfo",

            OpCodeType.HsDecls                              => "hs_decls",
            OpCodeType.HsControlPointPhase                  => "hs_control_point_phase",
            OpCodeType.HsForkPhase                          => "hs_fork_phase",
            OpCodeType.HsJoinPhase                          => "hs_join_phase",
            OpCodeType.EmitStream                           => "emit_stream",
            OpCodeType.CutStream                            => "cut_stream",
            OpCodeType.EmitThenCutStream                    => "emit_then_cut_stream",
            OpCodeType.InterfaceCall                        => "fcall",
            OpCodeType.BufInfo                              => "bufinfo",
            OpCodeType.DerivRtxCoarse                       => "deriv_rtx_coarse",
            OpCodeType.DerivRtxFine                         => "deriv_rtx_fine",
            OpCodeType.DerivRtyCoarse                       => "deriv_rty_coarse",
            OpCodeType.DerivRtyFine                         => "deriv_rty_fine",
            OpCodeType.Gather4C                             => "gather4_c",
            OpCodeType.Gather4Po                            => "gather4_po",
            OpCodeType.Gather4PoC                           => "gather4_po_c",
            OpCodeType.Rcp                                  => "rcp",
            OpCodeType.F32ToF16                             => "f32tof16",
            OpCodeType.F16ToF32                             => "f16tof32",
            OpCodeType.UAddC                                => "uaddc",
            OpCodeType.USubB                                => "usubb",
            OpCodeType.CountBits                            => "countbits",
            OpCodeType.FirstBitHi                           => "firstbit_hi",
            OpCodeType.FirstBitLo                           => "firstbit_lo",
            OpCodeType.FirstBitShi                          => "firstbit_shi",
            OpCodeType.UBfe                                 => "ubfe",
            OpCodeType.IBfe                                 => "ibfe",
            OpCodeType.Bfi                                  => "bfi",
            OpCodeType.Bfrev                                => "bfrev",
            OpCodeType.SwapC                                => "swapc",
            OpCodeType.DclStream                            => "dcl_stream",
            OpCodeType.DclFunctionBody                      => "dcl_function_body",
            OpCodeType.DclFunctionTable                     => "dcl_function_table",
            OpCodeType.DclInterface                         => "dcl_interface",
            OpCodeType.DclInputControlPointCount            => "dcl_input_control_point_count",
            OpCodeType.DclOutputControlPointCount           => "dcl_output_control_point_count",
            OpCodeType.DclTessDomain                        => "dcl_tessellator_domain",
            OpCodeType.DclTessPartitioning                  => "dcl_tessellator_partitioning",
            OpCodeType.DclTessOutputPrimitive               => "dcl_tessellator_output_primitive",
            OpCodeType.DclHsMaxTessfactor                   => "dcl_hs_max_tessfactor",
            OpCodeType.DclHsForkPhaseInstanceCount          => "dcl_hs_fork_phase_instance_count",
            OpCodeType.DclHsJoinPhaseInstanceCount          => "dcl_hs_join_phase_instance_count",
            OpCodeType.DclThreadGroup                       => "dcl_thread_group",
            OpCodeType.DclUnorderedAccessViewTyped          => "dcl_uav_typed",
            OpCodeType.DclUnorderedAccessViewRaw            => "dcl_uav_raw",
            OpCodeType.DclUnorderedAccessViewStructured     => "dcl_uav_structured",
            OpCodeType.DclThreadGroupSharedMemoryRaw        => "dcl_tgsm_raw",
            OpCodeType.DclThreadGroupSharedMemoryStructured => "dcl_tgsm_structured",
            OpCodeType.DclResourceRaw                       => "dcl_resource_raw",
            OpCodeType.DclResourceStructured                => "dcl_resource_structured",
            OpCodeType.LdUavTyped                           => "ld_uav_typed",
            OpCodeType.StoreUavTyped                        => "store_uav_typed",
            OpCodeType.LdRaw                                => "ld_raw",
            OpCodeType.StoreRaw                             => "store_raw",
            OpCodeType.LdStructured                         => "ld_structured",
            OpCodeType.StoreStructured                      => "store_structured",
            OpCodeType.AtomicAnd                            => "atomic_and",
            OpCodeType.AtomicOr                             => "atomic_or",
            OpCodeType.AtomicXor                            => "atomic_xor",
            OpCodeType.AtomicCmpStore                       => "atomic_cmp_store",
            OpCodeType.AtomicIAdd                           => "atomic_iadd",
            OpCodeType.AtomicIMax                           => "atomic_imax",
            OpCodeType.AtomicIMin                           => "atomic_imin",
            OpCodeType.AtomicUMax                           => "atomic_umax",
            OpCodeType.AtomicUMin                           => "atomic_umin",
            OpCodeType.ImmAtomicAlloc                       => "imm_atomic_alloc",
            OpCodeType.ImmAtomicConsume                     => "imm_atomic_consume",
            OpCodeType.ImmAtomicIAdd                        => "imm_atomic_iadd",
            OpCodeType.ImmAtomicAnd                         => "imm_atomic_and",
            OpCodeType.ImmAtomicOr                          => "imm_atomic_or",
            OpCodeType.ImmAtomicXor                         => "imm_atomic_xor",
            OpCodeType.ImmAtomicExch                        => "imm_atomic_exch",
            OpCodeType.ImmAtomicCmpExch                     => "imm_atomic_cmp_exch",
            OpCodeType.ImmAtomicIMax                        => "imm_atomic_imax",
            OpCodeType.ImmAtomicIMin                        => "imm_atomic_imin",
            OpCodeType.ImmAtomicUMax                        => "imm_atomic_umax",
            OpCodeType.ImmAtomicUMin                        => "imm_atomic_umin",
            OpCodeType.Sync                                 => "sync",
            OpCodeType.DAdd                                 => "dadd",
            OpCodeType.DMax                                 => "dmax",
            OpCodeType.DMin                                 => "dmin",
            OpCodeType.DMul                                 => "dmul",
            OpCodeType.DEq                                  => "deq",
            OpCodeType.DGe                                  => "dge",
            OpCodeType.DLt                                  => "dlt",
            OpCodeType.DNe                                  => "dne",
            OpCodeType.DMov                                 => "dmov",
            OpCodeType.DMovC                                => "dmovc",
            OpCodeType.DToF                                 => "dtof",
            OpCodeType.FToD                                 => "ftod",
            OpCodeType.EvalSnapped                          => "eval_snapped",
            OpCodeType.EvalSampleIndex                      => "eval_sample_index",
            OpCodeType.EvalCentroid                         => "eval_centroid",
            OpCodeType.DclGsInstanceCount                   => "dcl_gsinstances",
            OpCodeType.Abort                                => "abort",
            OpCodeType.DebugBreak                           => "debug_break",

            OpCodeType.DDiv => "ddiv",
            OpCodeType.DFma => "dfma",
            OpCodeType.DRcp => "drcp",
            OpCodeType.MSAD => "msad",
            OpCodeType.DToI => "dtoi",
            OpCodeType.DToU => "dtou",
            OpCodeType.IToD => "itod",
            OpCodeType.UToD => "utod",

            OpCodeType.Gather4Feedback        => "gather4_s",
            OpCodeType.Gather4CFeedback       => "gather4_c_s",
            OpCodeType.Gather4PoFeedback      => "gather4_po_s",
            OpCodeType.Gather4PoCFeedback     => "gather4_po_c_s",
            OpCodeType.LdFeedback             => "ld_s",
            OpCodeType.LdMsFeedback           => "ldms_s",
            OpCodeType.LdUavTypedFeedback     => "ld_uav_typed_s",
            OpCodeType.LdRawFeedback          => "ld_raw_s",
            OpCodeType.LdStructuredFeedback   => "ld_structured_s",
            OpCodeType.SampleLFeedback        => "sample_l_s",
            OpCodeType.SampleCLzFeedback      => "sample_c_lz_s",
            OpCodeType.SampleClampFeedback    => "sample_cl_s",
            OpCodeType.SampleBClampFeedback   => "sample_b_cl_s",
            OpCodeType.SampleDClampFeedback   => "sample_d_cl_s",
            OpCodeType.SampleCClampFeedback   => "sample_c_cl_s",
            OpCodeType.CheckAccessFullyMapped => "check_access_fully_mapped",

            _ => throw new InvalidEnumArgumentException($"Invalid opcode {opCode}"),
        };

    public static bool IsDeclaration(this OpCodeType opCode)
        => opCode is >= OpCodeType.DclResource and <= OpCodeType.DclGlobalFlags
            or >= OpCodeType.DclStream and <= OpCodeType.DclResourceStructured or OpCodeType.DclGsInstanceCount;

    public static bool HasStandardOperandFormat(this OpCodeType opCode)
        => !(opCode is OpCodeType.CustomData or OpCodeType.InterfaceCall || opCode.IsDeclaration());

    public static bool HasTest(this OpCodeType opCode)
        => opCode is OpCodeType.If or OpCodeType.Loop or OpCodeType.BreakC or OpCodeType.CallC or OpCodeType.ContinueC
            or OpCodeType.Discard or OpCodeType.RetC;

    public static bool IsBlockStart(this OpCodeType opCode)
        => opCode is OpCodeType.If or OpCodeType.Else or OpCodeType.Loop or OpCodeType.Switch;

    public static bool IsBlockEnd(this OpCodeType opCode)
        => opCode is OpCodeType.EndIf or OpCodeType.Else or OpCodeType.EndLoop or OpCodeType.EndSwitch;

    public static string ToSuffix(this Test test)
        => test switch
        {
            Test.Zero    => "_z",
            Test.NonZero => "_nz",
            _            => throw new InvalidEnumArgumentException($"Invalid test {test}"),
        };

    public static string ToSpacedString(this ComponentMask components)
        => $"{(components.HasFlag(ComponentMask.X) ? 'x' : ' ')}{(components.HasFlag(ComponentMask.Y) ? 'y' : ' ')}{(components.HasFlag(ComponentMask.Z) ? 'z' : ' ')}{(components.HasFlag(ComponentMask.W) ? 'w' : ' ')}";

    public static string ToCompactString(this ComponentMask components)
        => $"{(components.HasFlag(ComponentMask.X) ? "x" : string.Empty)}{(components.HasFlag(ComponentMask.Y) ? "y" : string.Empty)}{(components.HasFlag(ComponentMask.Z) ? "z" : string.Empty)}{(components.HasFlag(ComponentMask.W) ? "w" : string.Empty)}";

    public static string ToPrefixString(this OperandType type)
        => type switch
        {
            OperandType.Temp                                   => "r",
            OperandType.Input                                  => "v",
            OperandType.Output                                 => "o",
            OperandType.IndexableTemp                          => "x",
            OperandType.Immediate32 or OperandType.Immediate64 => "l",
            OperandType.Sampler                                => "s",
            OperandType.Resource                               => "t",
            OperandType.ConstantBuffer                         => "cb",
            OperandType.FunctionBody                           => "fb",
            OperandType.FunctionTable                          => "ft",
            OperandType.Interface                              => "fp",
            OperandType.ThisPointer                            => "this",
            OperandType.UnorderedAccessView                    => "u",
            OperandType.ThreadGroupSharedMemory                => "g",
            _                                                  => "???",
        };

    internal static string ToLowerString<T>(this T value) where T : Enum
        => value.ToString().ToLowerInvariant();

    internal static string ToCamelString<T>(this T value) where T : Enum
        => value.ToString().PascalToCamelInvariant();

    internal static string ToLowerWordsString<T>(this T value, char wordSeparator) where T : Enum
        => value.ToString().PascalToLowerWordsInvariant(wordSeparator);
}
