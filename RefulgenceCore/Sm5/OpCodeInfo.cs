using System.Collections.Immutable;
using System.ComponentModel;

namespace Refulgence.Sm5;

public readonly struct OpCodeInfo
{
    public readonly string      Mnemonic;
    public readonly OpCodeFlags Flags;
    public readonly byte        OutputOperandCount;
    public readonly byte        InputOperandCount;
    public readonly byte        PrecisionMask;

    private OpCodeInfo(string mnemonic, OpCodeFlags flags, byte outputs, byte inputs, byte precisionMask)
    {
        Mnemonic = mnemonic;
        Flags = flags;
        OutputOperandCount = outputs;
        InputOperandCount = inputs;
        PrecisionMask = precisionMask;
    }

    public static OpCodeInfo ForOpCode(OpCodeType opCode)
    {
        var index = (int)opCode;
        if (index >= Info.Length || Info[index].Mnemonic is null) {
            throw new InvalidEnumArgumentException($"Invalid opcode {opCode}");
        }

        return Info[index];
    }

    private static readonly OpCodeInfo[] Info =
    [
        new("add", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("and", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("break", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("breakc", OpCodeFlags.FlowControl | OpCodeFlags.HasTest, 0, 1, 0x00),
        new("call", OpCodeFlags.FlowControl, 0, 1, 0x00),
        new("callc", OpCodeFlags.FlowControl | OpCodeFlags.HasTest, 0, 2, 0x00),
        new("case", OpCodeFlags.FlowControl, 0, 1, 0x00),
        new("continue", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("continuec", OpCodeFlags.FlowControl | OpCodeFlags.HasTest, 0, 1, 0x00),
        new("cut", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("default", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("deriv_rtx", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("deriv_rty", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("discard", OpCodeFlags.FlowControl | OpCodeFlags.HasTest, 0, 1, 0x00),
        new("div", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("dp2", OpCodeFlags.FloatOperation, 1, 2, 0x06),
        new("dp3", OpCodeFlags.FloatOperation, 1, 2, 0x06),
        new("dp4", OpCodeFlags.FloatOperation, 1, 2, 0x06),
        new("else", OpCodeFlags.FlowControl | OpCodeFlags.BlockStart | OpCodeFlags.BlockEnd, 0, 0, 0x00),
        new("emit", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("emit_then_cut", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("endif", OpCodeFlags.FlowControl | OpCodeFlags.BlockEnd, 0, 0, 0x00),
        new("endloop", OpCodeFlags.FlowControl | OpCodeFlags.BlockEnd, 0, 0, 0x00),
        new("endswitch", OpCodeFlags.FlowControl | OpCodeFlags.BlockEnd, 0, 0, 0x00),
        new("eq", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("exp", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("frc", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("ftoi", OpCodeFlags.FloatOperation | OpCodeFlags.ConversionOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("ftou", OpCodeFlags.FloatOperation | OpCodeFlags.ConversionOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("ge", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("iadd", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("if", OpCodeFlags.FlowControl | OpCodeFlags.HasTest | OpCodeFlags.BlockStart, 0, 1, 0x00),
        new("ieq", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("ige", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("ilt", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("imad", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 3, 0x0E),
        new("imax", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("imin", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("imul", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 2, 2, 0x0C),
        new("ine", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("ineg", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("ishl", OpCodeFlags.IntOperation, 1, 2, 0x02),
        new("ishr", OpCodeFlags.IntOperation, 1, 2, 0x02),
        new("itof", OpCodeFlags.IntOperation | OpCodeFlags.ConversionOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("label", OpCodeFlags.FlowControl, 0, 1, 0x00),
        new("ld", OpCodeFlags.TextureOperation, 1, 2, 0x00),
        new("ldms", OpCodeFlags.TextureOperation, 1, 3, 0x00),
        new("log", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("loop", OpCodeFlags.FlowControl | OpCodeFlags.HasTest | OpCodeFlags.BlockStart, 0, 0, 0x00),
        new("lt", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("mad", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 3, 0x0E),
        new("min", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("max", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("custom_data", OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("mov", OpCodeFlags.FloatOperation | OpCodeFlags.MoveOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("movc", OpCodeFlags.FloatOperation | OpCodeFlags.MoveOperation | OpCodeFlags.Componentwise, 1, 3, 0x0C),
        new("mul", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("ne", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("nop", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("not", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("or", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("resinfo", OpCodeFlags.TextureOperation, 1, 2, 0x00),
        new("ret", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("retc", OpCodeFlags.FlowControl | OpCodeFlags.HasTest, 0, 1, 0x00),
        new("round_ne", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("round_ni", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("round_pi", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("round_z", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("rsq", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("sample", OpCodeFlags.TextureOperation, 1, 3, 0x00),
        new("sample_c", OpCodeFlags.TextureOperation, 1, 4, 0x00),
        new("sample_c_lz", OpCodeFlags.TextureOperation, 1, 4, 0x00),
        new("sample_l", OpCodeFlags.TextureOperation, 1, 4, 0x00),
        new("sample_d", OpCodeFlags.TextureOperation, 1, 5, 0x00),
        new("sample_b", OpCodeFlags.TextureOperation, 1, 4, 0x00),
        new("sqrt", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("switch", OpCodeFlags.FlowControl | OpCodeFlags.BlockStart, 0, 1, 0x00),
        new("sincos", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 2, 1, 0x04),
        new("udiv", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 2, 2, 0x0C),
        new("ult", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("uge", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("umul", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 2, 2, 0x0C),
        new("umad", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 1, 3, 0x0E),
        new("umax", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("umin", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("ushr", OpCodeFlags.UIntOperation, 1, 2, 0x02),
        new("utof", OpCodeFlags.UIntOperation | OpCodeFlags.ConversionOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("xor", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("dcl_resource", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_constantbuffer", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_sampler", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_indexrange", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_outputtopology", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dc_inputprimitive", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_maxout", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_input", OpCodeFlags.Declaration, 1, 0, 0x00),
        new("dcl_input_sgv", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_input_siv", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_input_ps", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_input_ps_sgv", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_input_ps_siv", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_output", OpCodeFlags.Declaration, 1, 0, 0x00),
        new("dcl_output_sgv", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_output_siv", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 1, 0, 0x00),
        new("dcl_temps", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_indexableTemp", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_globalFlags", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("jmp", OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("lod", OpCodeFlags.TextureOperation, 1, 3, 0x00),
        new("gather4", OpCodeFlags.TextureOperation, 1, 3, 0x00),
        new("samplepos", OpCodeFlags.TextureOperation, 1, 2, 0x00),
        new("sampleinfo", OpCodeFlags.TextureOperation, 1, 1, 0x00),
        default,
        new("hs_decls", OpCodeFlags.Declaration, 0, 0, 0x00),
        new("hs_control_point_phase", OpCodeFlags.Declaration, 0, 0, 0x00),
        new("hs_fork_phase", OpCodeFlags.Declaration, 0, 0, 0x00),
        new("hs_join_phase", OpCodeFlags.Declaration, 0, 0, 0x00),
        new("emit_stream", OpCodeFlags.FlowControl, 0, 1, 0x00),
        new("cut_stream", OpCodeFlags.FlowControl, 0, 1, 0x00),
        new("emit_then_cut_stream", OpCodeFlags.FlowControl, 0, 1, 0x00),
        new("fcall", OpCodeFlags.FlowControl | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("bufinfo", OpCodeFlags.TextureOperation, 1, 1, 0x00),
        new("deriv_rtx_coarse", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("deriv_rtx_fine", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("deriv_rty_coarse", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("deriv_rty_fine", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("gather4_c", OpCodeFlags.TextureOperation, 1, 4, 0x00),
        new("gather4_po", OpCodeFlags.TextureOperation, 1, 4, 0x00),
        new("gather4_po_c", OpCodeFlags.TextureOperation, 1, 5, 0x00),
        new("rcp", OpCodeFlags.FloatOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("f32tof16", OpCodeFlags.FloatOperation | OpCodeFlags.ConversionOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("f16tof32", OpCodeFlags.FloatOperation | OpCodeFlags.ConversionOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("uaddc", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 2, 2, 0x0C),
        new("usubb", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 2, 2, 0x0C),
        new("countbits", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("firstbit_hi", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("firstbit_lo", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("firstbit_shi", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("ubfe", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 3, 0x02),
        new("ibfe", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 3, 0x02),
        new("bfi", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 4, 0x02),
        new("bfrev", OpCodeFlags.BitOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("swapc", OpCodeFlags.FloatOperation | OpCodeFlags.MoveOperation | OpCodeFlags.Componentwise, 2, 3, 0x02),
        new("dcl_stream", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_function_body", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_function_table", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_interface", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_input_control_point_count", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_output_control_point_count", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_tessellator_domain", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_tessellator_partitioning", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_tessellator_output_primitive", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_hs_max_tessfactor", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_hs_fork_phase_instance_count", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_hs_join_phase_instance_count", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_thread_group", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_uav_typed", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_uav_raw", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_uav_structured", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_tgsm_raw", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_tgsm_structured", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_resource_raw", OpCodeFlags.Declaration, 1, 0, 0x00),
        new("dcl_resource_structured", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("ld_uav_typed", OpCodeFlags.MemoryOperation, 1, 2, 0x00),
        new("store_uav_typed", OpCodeFlags.MemoryOperation, 1, 2, 0x00),
        new("ld_raw", OpCodeFlags.MemoryOperation, 1, 2, 0x00),
        new("store_raw", OpCodeFlags.MemoryOperation, 1, 2, 0x00),
        new("ld_structured", OpCodeFlags.MemoryOperation, 1, 3, 0x00),
        new("store_structured", OpCodeFlags.MemoryOperation, 1, 3, 0x00),
        new("atomic_and", OpCodeFlags.AtomicOperation, 1, 2, 0x00),
        new("atomic_or", OpCodeFlags.AtomicOperation, 1, 2, 0x00),
        new("atomic_xor", OpCodeFlags.AtomicOperation, 1, 2, 0x00),
        new("atomic_cmp_store", OpCodeFlags.AtomicOperation, 1, 3, 0x00),
        new("atomic_iadd", OpCodeFlags.AtomicOperation, 1, 2, 0x00),
        new("atomic_imax", OpCodeFlags.AtomicOperation, 1, 2, 0x00),
        new("atomic_imin", OpCodeFlags.AtomicOperation, 1, 2, 0x00),
        new("atomic_umax", OpCodeFlags.AtomicOperation, 1, 2, 0x00),
        new("atomic_umin", OpCodeFlags.AtomicOperation, 1, 2, 0x00),
        new("imm_atomic_alloc", OpCodeFlags.AtomicOperation, 2, 0, 0x00),
        new("imm_atomic_consume", OpCodeFlags.AtomicOperation, 2, 0, 0x00),
        new("imm_atomic_iadd", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("imm_atomic_and", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("imm_atomic_or", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("imm_atomic_xor", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("imm_atomic_exch", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("imm_atomic_cmp_exch", OpCodeFlags.AtomicOperation, 2, 3, 0x00),
        new("imm_atomic_imax", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("imm_atomic_imin", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("imm_atomic_umax", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("imm_atomic_umin", OpCodeFlags.AtomicOperation, 2, 2, 0x00),
        new("sync", OpCodeFlags.FlowControl, 0, 0, 0x00),
        new("dadd", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("dmax", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("dmin", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("dmul", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("deq", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("dge", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("dlt", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("dne", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x00),
        new("dmov", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("dmovc", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 3, 0x0C),
        new("dtof", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("ftod", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("eval_snapped", OpCodeFlags.FloatOperation | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("eval_sample_index", OpCodeFlags.FloatOperation | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("eval_centroid", OpCodeFlags.FloatOperation | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("dcl_gsinstances", OpCodeFlags.Declaration | OpCodeFlags.CustomOperands, 0, 0, 0x00),
        new("abort", OpCodeFlags.DebugOperation, 0, 0, 0x00),
        new("debug_break", OpCodeFlags.DebugOperation, 0, 0, 0x00),
        default,
        new("ddiv", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 2, 0x06),
        new("dfma", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 3, 0x0E),
        new("drcp", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 1, 0x02),
        new("msad", OpCodeFlags.UIntOperation, 1, 3, 0x0E),
        new("dtoi", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("dtou", OpCodeFlags.DoubleOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("itod", OpCodeFlags.IntOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        new("utod", OpCodeFlags.UIntOperation | OpCodeFlags.Componentwise, 1, 1, 0x00),
        default,
        new("gather4_s", OpCodeFlags.TextureOperation, 2, 3, 0x00),
        new("gather4_c_s", OpCodeFlags.TextureOperation, 2, 4, 0x00),
        new("gather4_po_s", OpCodeFlags.TextureOperation, 2, 4, 0x00),
        new("gather4_po_c_s", OpCodeFlags.TextureOperation, 2, 5, 0x00),
        new("ld_s", OpCodeFlags.TextureOperation, 2, 2, 0x00),
        new("ldms_s", OpCodeFlags.TextureOperation, 2, 3, 0x00),
        new("ld_uav_typed_s", OpCodeFlags.TextureOperation, 2, 2, 0x00),
        new("ld_raw_s", OpCodeFlags.TextureOperation, 2, 2, 0x00),
        new("ld_structured_s", OpCodeFlags.TextureOperation, 2, 3, 0x00),
        new("sample_l_s", OpCodeFlags.TextureOperation, 2, 4, 0x00),
        new("sample_c_lz_s", OpCodeFlags.TextureOperation, 2, 4, 0x00),
        new("sample_cl_s", OpCodeFlags.TextureOperation, 2, 4, 0x00),
        new("sample_b_cl_s", OpCodeFlags.TextureOperation, 2, 5, 0x00),
        new("sample_d_cl_s", OpCodeFlags.TextureOperation, 2, 6, 0x00),
        new("sample_c_cl_s", OpCodeFlags.TextureOperation, 2, 5, 0x00),
        new("check_access_fully_mapped", OpCodeFlags.TextureOperation, 1, 1, 0x00),
    ];
}
